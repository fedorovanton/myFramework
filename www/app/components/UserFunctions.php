<?php/** * Created by PhpStorm. * User: fedorovau * Date: 09.07.16 * Time: 15:23 */namespace App\Components;class UserFunctions{    /**     * Подключение последней версии стиля     * @param $style     * @return string     */    public static function includeStyle($style)    {        // самая последняя версия возможного css файла        $ver = 5;        // в цикле ищем файл css с последней версией        while ($ver > 0) {            $file = __DIR__ . '/../templates/css/' . $style . '.ver' . $ver . '.css';            if (file_exists($file)) {                // если файл существуем, то возвращаем линк для подключения                return '<link rel="stylesheet" type="text/css" href="/app/templates/css/' . $style . '.ver' . $ver . '.css" />';            }            // уменьшаем версию файла на 1 для следующего поиска            $ver--;        }        // если необъодимый файл не найден, то подключаем его как внешний        return '<link rel="stylesheet" type="text/css" href="' . $style . '" />';    }    /**     * Подключение скрипта     * @param $js     * @return string     */    public static function includeJavascript($js)    {        $file = __DIR__ . '/../templates/js/' . $js;        if (file_exists($file)) {            return '<script type="text/javascript" src="/app/templates/js/' . $js . '"></script>';        } else {            return '<script type="text/javascript" src="' . $js . '"></script>';        }    }    /**     * Конвертация русского в транслит     * @param $string     * @return string     */    public static function rusToEng($string)    {        $converter = array(            'а' => 'a', 'б' => 'b', 'в' => 'v',            'г' => 'g', 'д' => 'd', 'е' => 'e',            'ё' => 'e', 'ж' => 'zh', 'з' => 'z',            'и' => 'i', 'й' => 'y', 'к' => 'k',            'л' => 'l', 'м' => 'm', 'н' => 'n',            'о' => 'o', 'п' => 'p', 'р' => 'r',            'с' => 's', 'т' => 't', 'у' => 'u',            'ф' => 'f', 'х' => 'h', 'ц' => 'c',            'ч' => 'ch', 'ш' => 'sh', 'щ' => 'sch',            'ь' => "'", 'ы' => 'y', 'ъ' => "'",            'э' => 'e', 'ю' => 'yu', 'я' => 'ya',            'А' => 'A', 'Б' => 'B', 'В' => 'V',            'Г' => 'G', 'Д' => 'D', 'Е' => 'E',            'Ё' => 'E', 'Ж' => 'Zh', 'З' => 'Z',            'И' => 'I', 'Й' => 'Y', 'К' => 'K',            'Л' => 'L', 'М' => 'M', 'Н' => 'N',            'О' => 'O', 'П' => 'P', 'Р' => 'R',            'С' => 'S', 'Т' => 'T', 'У' => 'U',            'Ф' => 'F', 'Х' => 'H', 'Ц' => 'C',            'Ч' => 'Ch', 'Ш' => 'Sh', 'Щ' => 'Sch',            'Ь' => "'", 'Ы' => 'Y', 'Ъ' => "'",            'Э' => 'E', 'Ю' => 'Yu', 'Я' => 'Ya',            ' ' => '_',        );        return strtr($string, $converter);    }    public static function redirect()    {        $redirect = isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '/';        header("Location: $redirect");        exit;    }    public static function rus_mounth($short_mounth)    {        switch ($short_mounth) {            case('01'):                return "января";                break;            case('02'):                return "февраля";                break;            case('03'):                return "марта";                break;            case('04'):                return "апреля";                break;            case('05'):                return "мая";                break;            case('06'):                return "июня";                break;            case('07'):                return "июля";                break;            case('08'):                return "августа";                break;            case('09'):                return "сентября";                break;            case('10'):                return "октября";                break;            case('11'):                return "ноября";                break;            case('12'):                return "декабря";                break;        }    }    /**     * Очистка одного значения от XSS     * @param $var     * @return string     */    public static function clear($var)    {        // TODO: в будущем нужно будет использовать библиотеку HTML Purifier с помощью Composer        $var = str_replace("'", "", $var); // убираем '        $var = str_replace("\"", "", $var); // убираем "        return htmlentities($var, ENT_QUOTES, 'UTF-8');    }    /**     * Очистка всего массива от XSS     * @param array $data     * @return array     */    public static function clearArray(array $data)    {        $clearData = [];        foreach ($data as $key => $val) {            $clearData[$key] = self::clear($val);        }        return $clearData;    }    /**     * Проверка поля Имя - должно быть больше 3 и меньше 10 символов     * @param $name     * @return bool     */    public static function checkName($name)    {        if ((strlen($name) <= 10) and (strlen($name) >= 3)) {            return true;        }        return false;    }    /**     * Проверка поля Телефон - должен быть больше 6 символов     * @param $phone     * @return bool     */    public static function checkPhone($phone)    {        if (strlen($phone) >= 6) {            return true;        }        return false;    }    /**     * Проверка поля Текст - должен быть больше 10 и меньше 500 символов     * @param $text     * @return bool     */    public static function checkText($text)    {        if ((strlen($text) >= 10) and (strlen($text) <= 500)) {            return true;        }        return false;    }    /**     * Проверка e-mail     * @param $email     * @return bool     */    public static function checkEmail($email)    {        if (filter_var($email, FILTER_VALIDATE_EMAIL)) {            return true;        }        return false;    }    /**     * // Определяем какое у клиента время и приводим к Московскому     */    public static function checkUserTimeHours()    {        date_default_timezone_set("UTC"); // Устанавливаем часовой пояс по Гринвичу        $time = time(); // Вот это значение отправляем в базу        $time += 3 * 3600; // Добавляем 3 часа к времени по Гринвичу, чтобы привязывать пользователей к Московскому часовому поясу        $timeHoursMoscow = date('H', $time); // получить только значение часы из Московского времени        return $timeHoursMoscow;    }    /**     * Отделить тысячи и сотни (24500 => 24 500)     * Если нету, то вернуть число обратно     *     * @param $sum     * @return string     */    public static function separate($sum)    {        $length = strlen($sum);        if ($length > 3) {            $hundreds = substr($sum, -3);            $thousands = substr($sum, 0, $length-3);            return $thousands . " " . $hundreds;        } else {            return $sum;        }    }    /**     * Отсортировать записи в объекте/массиве     *     * @param $array     * @param array $args     * @return mixed     */    public static function sortRecords( $array, $args = array('incoming_date' => 'desc') )    {        usort( $array, function( $a, $b ) use ( $args ){            $res = 0;            $a = (object) $a;            $b = (object) $b;            foreach( $args as $k => $v ){                if( $a->$k == $b->$k ) continue;                $res = ( $a->$k < $b->$k ) ? -1 : 1;                if( $v=='desc' ) $res= -$res;                break;            }            return $res;        } );        return $array;    }}